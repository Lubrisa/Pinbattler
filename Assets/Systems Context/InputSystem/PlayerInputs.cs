//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Systems Context/InputSystem/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Computer"",
            ""id"": ""57674850-5769-4e59-8fe5-d971c56a9302"",
            ""actions"": [
                {
                    ""name"": ""Flippers"",
                    ""type"": ""Button"",
                    ""id"": ""936e10ba-139c-4b20-a2fd-0f657311cdad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spring"",
                    ""type"": ""Button"",
                    ""id"": ""c8270b31-b788-4646-b8e9-479083104d5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability"",
                    ""type"": ""Button"",
                    ""id"": ""20e09149-4ea6-485e-a515-8c4d5466cd6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""912d4db6-3c3b-4bb6-8107-4a2f132a94d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""5b7336f8-b8cf-4e15-baba-e3ff4b02e7cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""FlipperAxis"",
                    ""id"": ""bafa9aa3-6175-4297-8074-2783131a3041"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flippers"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""78f7f696-4500-47ee-a1ea-25a892e59f06"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flippers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7466fc45-9ba4-4a79-994b-7b1a74923ffb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flippers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""FlipperAxis"",
                    ""id"": ""ad6718ef-5092-400e-b0d1-86384aa63df3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flippers"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c8a8f945-1aa7-4216-9d74-1aef5670d423"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flippers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f37217cc-8aa7-4495-bf44-66f6ee18ce97"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flippers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dab5e23e-7584-4939-9464-d08cde34c8ce"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spring"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c310f07-8d03-43f4-9d51-9db5420a77b5"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spring"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b32a4df-aa81-42e3-bb4c-6d131d847ef8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1718793-b954-4c77-84db-a2625b2d2278"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08e87c78-4f34-4dea-92e2-9a7fd665a25c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Hold(duration=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5167875-b1d4-4e0b-beea-b4d1839f31e6"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Computer"",
            ""bindingGroup"": ""Computer"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Computer
        m_Computer = asset.FindActionMap("Computer", throwIfNotFound: true);
        m_Computer_Flippers = m_Computer.FindAction("Flippers", throwIfNotFound: true);
        m_Computer_Spring = m_Computer.FindAction("Spring", throwIfNotFound: true);
        m_Computer_Ability = m_Computer.FindAction("Ability", throwIfNotFound: true);
        m_Computer_Skip = m_Computer.FindAction("Skip", throwIfNotFound: true);
        m_Computer_Pause = m_Computer.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Computer
    private readonly InputActionMap m_Computer;
    private IComputerActions m_ComputerActionsCallbackInterface;
    private readonly InputAction m_Computer_Flippers;
    private readonly InputAction m_Computer_Spring;
    private readonly InputAction m_Computer_Ability;
    private readonly InputAction m_Computer_Skip;
    private readonly InputAction m_Computer_Pause;
    public struct ComputerActions
    {
        private @PlayerInputs m_Wrapper;
        public ComputerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Flippers => m_Wrapper.m_Computer_Flippers;
        public InputAction @Spring => m_Wrapper.m_Computer_Spring;
        public InputAction @Ability => m_Wrapper.m_Computer_Ability;
        public InputAction @Skip => m_Wrapper.m_Computer_Skip;
        public InputAction @Pause => m_Wrapper.m_Computer_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Computer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ComputerActions set) { return set.Get(); }
        public void SetCallbacks(IComputerActions instance)
        {
            if (m_Wrapper.m_ComputerActionsCallbackInterface != null)
            {
                @Flippers.started -= m_Wrapper.m_ComputerActionsCallbackInterface.OnFlippers;
                @Flippers.performed -= m_Wrapper.m_ComputerActionsCallbackInterface.OnFlippers;
                @Flippers.canceled -= m_Wrapper.m_ComputerActionsCallbackInterface.OnFlippers;
                @Spring.started -= m_Wrapper.m_ComputerActionsCallbackInterface.OnSpring;
                @Spring.performed -= m_Wrapper.m_ComputerActionsCallbackInterface.OnSpring;
                @Spring.canceled -= m_Wrapper.m_ComputerActionsCallbackInterface.OnSpring;
                @Ability.started -= m_Wrapper.m_ComputerActionsCallbackInterface.OnAbility;
                @Ability.performed -= m_Wrapper.m_ComputerActionsCallbackInterface.OnAbility;
                @Ability.canceled -= m_Wrapper.m_ComputerActionsCallbackInterface.OnAbility;
                @Skip.started -= m_Wrapper.m_ComputerActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_ComputerActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_ComputerActionsCallbackInterface.OnSkip;
                @Pause.started -= m_Wrapper.m_ComputerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ComputerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ComputerActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_ComputerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Flippers.started += instance.OnFlippers;
                @Flippers.performed += instance.OnFlippers;
                @Flippers.canceled += instance.OnFlippers;
                @Spring.started += instance.OnSpring;
                @Spring.performed += instance.OnSpring;
                @Spring.canceled += instance.OnSpring;
                @Ability.started += instance.OnAbility;
                @Ability.performed += instance.OnAbility;
                @Ability.canceled += instance.OnAbility;
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public ComputerActions @Computer => new ComputerActions(this);
    private int m_ComputerSchemeIndex = -1;
    public InputControlScheme ComputerScheme
    {
        get
        {
            if (m_ComputerSchemeIndex == -1) m_ComputerSchemeIndex = asset.FindControlSchemeIndex("Computer");
            return asset.controlSchemes[m_ComputerSchemeIndex];
        }
    }
    public interface IComputerActions
    {
        void OnFlippers(InputAction.CallbackContext context);
        void OnSpring(InputAction.CallbackContext context);
        void OnAbility(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
